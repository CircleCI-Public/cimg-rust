version: 2.1

orbs:
  bt: circleci/build-tools@2.6.3
  cimg: cci-dev/cimg@0.0.23
  docker: circleci/docker@0.5.12

parameters:
  commit:
    type: boolean
    default: true

  build-rust:
    type: boolean
    default: false

  build-rust-node:
    type: boolean
    default: false

  tag:
    type: string
    default: "${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
    # edge, stable

  target:
    type: enum
    enum: [ccitest, cimg]
    default: ccitest

  rust-version:
    type: enum
    enum: ["", "1.34.0", "1.34.1", "1.34.2", "1.35.0", "1.36.0"]
    default: ""

jobs:
  trigger-pipeline-builds:
    executor: cimg/base
    parameters:
      node:
        type: boolean
        default: false
      tag:
        type: string
        default: "${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
        # edge, stable
      target:
        type: enum
        enum: [ccitest, cimg]
        default: ccitest

    steps:
      - checkout
      - run:
          name: Trigger image build/test/deploy
          command: |
            source ./manifest

            echo "${CIRCLE_BRANCH}"

            for version in "${versions[@]}"
            do
              curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
                \"branch\": \"${CIRCLE_BRANCH}\",
                \"parameters\": {
                  \"commit\": false,
                  \"build-rust<<#parameters.node>>-node<</parameters.node>>\": true,
                  \"rust-version\": \"${version}\",
                  \"tag\": \"<<parameters.tag>>\",
                  \"target\": \"<<parameters.target>>\"
                }
              }" https://circleci.com/api/v2/project/gh/CircleCI-Public/cimg-rust/pipeline
            done

  prepare-dockerfiles:
    executor: cimg/default
    parameters:
      base-org-image-tag:
        type: string
      step-name:
        type: string
      variant:
        type: enum
        enum: ["", node]
        default: ""
    steps:
      - checkout
      - run:
          name: <<parameters.step-name>>
          command: |
            BASE=<<parameters.base-org-image-tag>>

            source ./manifest

            <<#parameters.variant>>mkdir -p <<parameters.variant>>
            cd <<parameters.variant>><</parameters.variant>>
            <<^parameters.variant>>mkdir -p rust
            cd rust<</parameters.variant>>

            for version in "${versions[@]}"
            do
              echo "$version"

              mkdir -p "$version"

              sed -r -e 's!%%BASE_ORG_BASE_IMAGE_BASE_TAG%%!'"$BASE"'!g' \
                ~/project/Dockerfile.template > "$version/Dockerfile"

              perl -i -pe 's!%%RUST_VERSION%%!'"$version"'!g' "$version/Dockerfile"
            done

      - save_cache:
          paths: ~/project<<#parameters.variant>>/node<</parameters.variant>>
          key: rust-dockerfiles<<#parameters.variant>>-node<</parameters.variant>>-{{ .Branch }}-{{ .Revision }}

      - persist_to_workspace:
          root: ~/
          paths: project

      - store_artifacts:
          path: ~/project

dev-filters: &dev-filters
  branches:
    ignore: master

master-filters: &master-filters
  branches:
    only: master

dockerfiles: &dockerfiles
  rust/1.34.0/Dockerfile,rust/1.34.1/Dockerfile,rust/1.34.2/Dockerfile,rust/1.35.0/Dockerfile,rust/1.36.0/Dockerfile

node-dockerfiles: &node-dockerfiles
  node/1.34.0/Dockerfile,node/1.34.1/Dockerfile,node/1.34.2/Dockerfile,node/1.35.0/Dockerfile,node/1.36.0/Dockerfile


workflows:
  commit-ccitest-lint-dev:
    when: <<pipeline.parameters.commit>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-ccitest
          base-org-image-tag: cimg/base:edge
          step-name: Prepare ccitest/rust Dockerfiles from template
          filters: *dev-filters

      - docker/hadolint:
          name: lint-rust-ccitest
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *dockerfiles
          filters: *dev-filters
          requires: [prepare-dockerfiles-rust-ccitest]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-ccitest
          context: image-publishing
          filters: *dev-filters
          requires: [lint-rust-ccitest]

  commit-ccitest-node-lint-dev:
    when: <<pipeline.parameters.commit>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-ccitest-node
          base-org-image-tag: cimg/base:edge-node
          step-name: Prepare ccitest/rust:node Dockerfiles from template
          variant: node
          filters: *dev-filters

      - docker/hadolint:
          name: lint-rust-ccitest-node
          context: image-publishing
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *node-dockerfiles
          filters: *dev-filters
          requires: [prepare-dockerfiles-rust-ccitest-node]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-ccitest-node
          context: image-publishing
          node: true
          filters: *dev-filters
          requires: [lint-rust-ccitest-node]

  commit-edge-lint-master:
    when: <<pipeline.parameters.commit>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-edge
          base-org-image-tag: cimg/base:edge
          step-name: Prepare cimg/rust:edge Dockerfiles from template
          filters: *master-filters

      - docker/hadolint:
          name: lint-rust-edge
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *dockerfiles
          filters: *master-filters
          requires: [prepare-dockerfiles-rust-edge]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-edge
          context: image-publishing
          tag: edge
          target: cimg
          filters: *master-filters
          requires: [lint-rust-edge]

  commit-edge-node-lint-master:
    when: <<pipeline.parameters.commit>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-edge-node
          base-org-image-tag: cimg/base:edge-node
          step-name: Prepare cimg/rust:edge-node Dockerfiles from template
          variant: node
          filters: *master-filters

      - docker/hadolint:
          name: lint-rust-edge-node
          context: image-publishing
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *node-dockerfiles
          filters: *master-filters
          requires: [prepare-dockerfiles-rust-edge-node]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-edge-node
          context: image-publishing
          tag: edge
          target: cimg
          node: true
          filters: *master-filters
          requires: [lint-rust-edge-node]

  build-test-deploy:
    when: <<pipeline.parameters.build-rust>>
    jobs:
      - cimg/build-test-deploy:
          name: rust-<<pipeline.parameters.rust-version>>
          context: image-publishing
          restore-cache: true
          cache-key: rust-dockerfiles-{{ .Branch }}-{{ .Revision }}
          dockerfile-path: ~/project/rust/<<pipeline.parameters.rust-version>>
          image-name: <<pipeline.parameters.target>>/rust
          image-tag: <<pipeline.parameters.rust-version>>-<<pipeline.parameters.tag>>
          extra-build-args: --pull
          goss-yaml-dir-path: ~/project
          test-suite-name: rust
          deploy: true
          publish-tags: latest

  build-test-deploy-node:
    when: <<pipeline.parameters.build-rust-node>>
    jobs:
      - cimg/build-test-deploy:
          name: rust-<<pipeline.parameters.rust-version>>-node
          context: image-publishing
          restore-cache: true
          cache-key: rust-dockerfiles-node-{{ .Branch }}-{{ .Revision }}
          dockerfile-path: ~/project/node/<<pipeline.parameters.rust-version>>
          image-name: <<pipeline.parameters.target>>/rust
          image-tag: <<pipeline.parameters.rust-version>>-<<pipeline.parameters.tag>>-node
          extra-build-args: --pull
          goss-yaml-dir-path: ~/project
          test-suite-name: rust-node
          deploy: true
