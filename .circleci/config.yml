version: 2.1

parameters:
  build-rust:
    type: boolean
    default: false

  build-rust-node:
    type: boolean
    default: false

  tag:
    type: enum
    enum: ["$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}", edge, stable]
    default: "$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}"

  target:
    type: enum
    enum: [ccitest, cimg]
    default: ccitest

  rust-version:
    type: enum
    enum: ["", "1.34", "1.34.0", "1.34.1", "1.34.2", "1.35", "1.35.0", "1.36", "1.36.0"]
    default: ""

orbs:
  bt: circleci/build-tools@2.6.3
  cimg: cci-dev/cimg@0.0.21
  docker: circleci/docker@0.5.12

dev-filters: &dev-filters
  branches:
    ignore: master

master-filters: &master-filters
  branches:
    only: master

dockerfiles: &dockerfiles
  1.34/Dockerfile,1.34.0/Dockerfile,1.34.1/Dockerfile,1.34.2/Dockerfile,1.35/Dockerfile,1.35.0/Dockerfile,1.36/Dockerfile,1.36.0/Dockerfile

node-dockerfiles: &node-dockerfiles
  node/1.34/Dockerfile,node/1.34.0/Dockerfile,node/1.34.1/Dockerfile,node/1.34.2/Dockerfile,node/1.35/Dockerfile,node/1.35.0/Dockerfile,node/1.36/Dockerfile,node/1.36.0/Dockerfile

commands:
  prepare-dockerfiles-from-template:
    parameters:
      base-org-image-tag:
        type: string
      step-name:
        type: string
      variant:
        type: enum
        enum: ["", node]
        default: ""
    steps:
      - run:
          name: <<parameters.step-name>>
          command: |
            BASE=<<parameters.base-org-image-tag>>

            source ./manifest

            <<#parameters.variant>>mkdir -p <<parameters.variant>>
            cd <<parameters.variant>><</parameters.variant>>

            for version in "${versions[@]}"
            do
              echo "$version"

              mkdir -p "$version"

              sed -r -e 's!%%BASE_ORG_BASE_IMAGE_BASE_TAG%%!'"$BASE"'!g' \
                ~/project/Dockerfile.template > "$version/Dockerfile"

              perl -i -pe 's!%%RUST_VERSION%%!'"$version"'!g' "$version/Dockerfile"
            done

jobs:
  prepare-dockerfiles:
    executor: cimg/base
    parameters:
      base-org-image-tag:
        type: string
      step-name:
        type: string
      variant:
        type: enum
        enum: ["", node]
        default: ""

    steps:
      - checkout

      - prepare-dockerfiles-from-template:
          base-org-image-tag: <<parameters.base-org-image-tag>>
          step-name: <<parameters.step-name>>
          variant: <<parameters.variant>>

      - persist_to_workspace:
          root: ~/
          paths: project

      - store_artifacts:
          path: ~/project

  trigger-pipeline-builds:
    executor: cimg/base
    parameters:
      node:
        type: boolean
        default: false

    steps:
      - checkout
      - run:
          name: Trigger image build/test/deploy
          command: |
            source ./manifest

            echo "${CIRCLE_BRANCH}"

            for version in "${versions[@]}"
            do
              curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d '{
                "branch": "${CIRCLE_BRANCH}",
                "parameters": {
                  "build-rust<<#parameters.node>>-node<</parameters.node>>": true,
                  "rust-version": "$version"
                }
              }' https://circleci.com/api/v2/project/gh/CircleCI-Public/cimg-rust/pipeline
            done

workflows:
  # monthly-cron:
  #   triggers:
  #     - schedule:
  #         cron: "0 0 2 * *"
  #         filters: *master-filters
  #   jobs:


  commit-ccitest-lint:
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-ccitest
          base-org-image-tag: cimg/base:edge
          step-name: Prepare ccitest/rust Dockerfiles from template
          filters: *dev-filters

      - docker/hadolint:
          name: lint-rust-ccitest
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *dockerfiles
          filters: *dev-filters
          requires: [prepare-dockerfiles-rust-ccitest]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-ccitest
          context: image-publishing
          requires: [lint-rust-ccitest]

  commit-ccitest-node-lint:
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-ccitest-node
          base-org-image-tag: cimg/base:edge-node
          step-name: Prepare ccitest/rust:node Dockerfiles from template
          variant: node
          filters: *dev-filters

      - docker/hadolint:
          name: lint-rust-ccitest-node
          context: image-publishing
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfiles: *node-dockerfiles
          filters: *dev-filters
          requires: [prepare-dockerfiles-rust-ccitest-node]

      - trigger-pipeline-builds:
          name: trigger-pipeline-builds-ccitest-node
          context: image-publishing
          node: true
          requires: [lint-rust-ccitest-node]

  build-test-deploy-<<pipeline.parameters.rust-version>>:
    when: <<pipeline.parameters.build-rust>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-<<pipeline.parameters.rust-version>>
          base-org-image-tag: cimg/base:edge
          step-name: Prepare <<pipeline.parameters.target>>/rust:<<pipeline.parameters.tag>> Dockerfiles from template

      - cimg/build-test-deploy:
          name: rust-<<pipeline.parameters.rust-version>>
          context: image-publishing
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfile-path: ~/project/<<pipeline.parameters.rust-version>>
          image-name: <<pipeline.parameters.target>>/rust
          image-tag: <<pipeline.parameters.rust-version>>
          extra-build-args: --pull
          goss-yaml-dir-path: ~/project
          test-suite-name: rust
          deploy: true
          publish-tags: latest
          requires: [prepare-dockerfiles-rust-<<pipeline.parameters.rust-version>>]

  build-test-deploy-<<pipeline.parameters.rust-version>>-node:
    when: <<pipeline.parameters.build-rust-node>>
    jobs:
      - prepare-dockerfiles:
          name: prepare-dockerfiles-rust-<<pipeline.parameters.rust-version>>-node
          base-org-image-tag: cimg/base:edge-node
          step-name: Prepare <<pipeline.parameters.target>>/rust:<<pipeline.parameters.tag>>-node Dockerfiles from template
          variant: node

      - cimg/build-test-deploy:
          name: rust-<<pipeline.parameters.rust-version>>-node
          context: image-publishing
          checkout: false
          attach-workspace: true
          workspace-root: ~/
          dockerfile-path: ~/project/<<pipeline.parameters.rust-version>>
          image-name: <<pipeline.parameters.target>>/rust
          image-tag: <<pipeline.parameters.rust-version>>-node
          extra-build-args: --pull
          goss-yaml-dir-path: ~/project
          test-suite-name: rust
          deploy: true
          requires: [prepare-dockerfiles-rust-<<pipeline.parameters.rust-version>>-node]
